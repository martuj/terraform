Login to AWS Console


###################################
Lab : Creating an EC2 Instance in AWS and Installing Terraform
###################################

Task: Installing Terraform on Ubuntu 20.04 operating system
=============================================================
Launch a t2.micro instance with OS version Ubuntu 20.04 (North Virginia / us-east-1)
In sec group, include ports 22 and 80. Use tag 'Name:Terraform'

login with username as ubuntu

After EC2 is ready:

sudo hostnamectl set-hostname terraform
# Hostname will appear if you exit and login again. Or you can type 'bash' and open another shell

sudo apt update
sudo apt install wget unzip -y

wget https://releases.hashicorp.com/terraform/1.4.6/terraform_1.4.6_linux_amd64.zip
unzip terraform_1.4.6_linux_amd64.zip

https://releases.hashicorp.com/terraform/1.5.6/terraform_1.5.6_linux_amd64.zip
ls
sudo mv terraform /usr/local/bin
ls
terraform
terraform -v


Task : Install and login to Ubuntu server from AWS EC2 Instance 
======================================================

sudo apt-get install python3-pip -y
sudo pip3 install awscli

aws configure
Add AKID
Add SAK

aws s3 ls



###################################
Lab : AWS EC2 instance creation using Terraform Variables
###################################

Task 1: Create EC2 instance using variables 
===========================================
cd /home/ubuntu/terraform-labs/
mkdir variables-lab && cd variables-lab/

vi provider.tf

# Add the given lines, by pressing "INSERT" 

provider "aws"{
  access_key=var.AWS_ACCESS_KEY
  secret_key=var.AWS_SECRET_KEY
  region=var.AWS_REGION
}

# save the file using "ESCAPE + :wq!"

vi vars.tf

# Add the given lines, by pressing "INSERT" 

variable "AWS_ACCESS_KEY"{}
variable "AWS_SECRET_KEY"{}
variable "AWS_REGION"{
  default = "us-east-2"
}

# save the file using "ESCAPE + :wq!"

vi terraform.tfvars

# Add the given lines, by pressing "INSERT" 

AWS_ACCESS_KEY="< Insert your AWS Access Key >"
AWS_SECRET_KEY="< Insert your AWS Secret Key >"


# save the file using "ESCAPE + :wq!"

vi instance.tf

# Add the given lines, by pressing "INSERT" 

resource "aws_instance" "terraform_example"{
  ami = "ami-0d5d9d301c853a04a"
  instance_type="t2.micro"
  tags = {
    Name = "Lab2-yourname"
  }
}

# save the file using "ESCAPE + :wq!"

terraform init
terraform plan
terraform apply


# Use the "terraform destroy" command for cleaning the infrastructure used in this lab
terraform destroy -auto-approve

# Additional Note
# If the name of the tfvars files is anything other than terraform.tfvars then you can 
# use the below command.
terraform apply -var-file=<var file name>



Task 2: Implementing map variables that dynamically fetch AMI based on the Linux distro selected
================================================================================================


vi instance.tf

# Delete the existing lines and Add the given lines, by pressing "INSERT" 

resource "aws_instance" "terraform_example"{
  ami = var.AMIS[var.Linux_distro]
  instance_type="t2.micro"
  tags = {
    Name = "yourname-lab8B-task2"
  }
}

# save the file using "ESCAPE + :wq!"

vi vars.tf

# Delete the existing lines and Add the given lines, by pressing "INSERT" 

variable "AWS_ACCESS_KEY"{}
variable "AWS_SECRET_KEY"{}
variable "AWS_REGION"{
  default = "us-east-2"
  }

variable "Linux_distro"{
  #description="Please Enter the Linux distro (redhat , ubuntu, amazon )"
  default = "amazon"
  }

variable "AMIS"{
  type=map(string)
  default={
   redhat="ami-0ba62214afa52bec7"
   ubuntu="ami-0fb653ca2d3203ac1"
   amazon="ami-0231217be14a6f3ba"
  }
}

# save the file using "ESCAPE + :wq!"


terraform fmt
terraform validate
terraform plan -var 'Linux_distro=redhat' -out myplan
terraform apply myplan


# Use the "terraform destroy" command for cleaning the infrastructure used in this lab
terraform destroy



###################################
Lab 3 : Using Output Feature 
###################################


Task 1: Using output feature of Terraform to get the IP Address of EC2 Instance
===============================================================================

cd /home/ubuntu/
wget https://s3.ap-south-1.amazonaws.com/files.cloudthat.training/devops/terraform-essentials/output-variable-lab-v0.13.5.tar.gz
tar -xvf output-variable-lab-v0.13.5.tar.gz
cd output-variable-lab/
ls

cat instance.tf
cat output.tf
cat vars.tf

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply

ls 
cat private_ips.txt 

terraform output Public_ip
terraform output Private_ip

# Use the "terraform destroy" command for cleaning the infrastructure used in this lab, remove the 
  directory using rm -rf

terraform destroy

cd ..
rm -rf output-variable-lab



###################################
Lab 4 : Remote State using Amazon Simple Storage Service 
###################################

Task 1: Create a S3 Bucket on AWS Console 
=========================================
Create a new S3 bucket by name: yourname-terraform. Remove block public access.
select -I acknowledge that the current settings might result in this bucket and the objects within becoming public.
Select ACLs enabled
select-I acknowledge that ACLs will be restored.
enable versioning. 

aws s3 ls 
https://s3.ap-south-1.amazonaws.com/

Task 2: Configure Remote State
==============================
cd /home/ubuntu/terraform-labs/
wget https://s3.ap-south-1.amazonaws.com/files.cloudthat.training/devops/terraform-essentials/remote_state_lab.tar.gz
tar -zxvf remote_state_lab.tar.gz
cd remote-state-lab
ls

cat instance.tf
cat vars.tf
cat provider.tf

vi backend.tf

# Add the given lines, by pressing "INSERT" 

terraform {
  backend "s3" {
    bucket = "<Replace your s3 bucket name>"
    key    = "terraform/remotestate"
  }
}

# save the file using "ESCAPE + :wq!"

cat backend.tf

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply

##Go to s3 bucket and open the s3 bucket open terraform/remotestate
Click on permision and click on under acl contrl list edit 
select read under objects. 
select-I understand the effects of these changes on this object.
click on save changes
copy object url and paste in the web browser.
you should able to access the state file.



# This command shows the attributes of a single resource in the Terraform state.
terraform state show aws_instance.terraform-remoteState

# Use the "terraform destroy" command for cleaning the infrastructure used in this lab, 
# remove the directory using rm -rf

terraform destroy

cd ..
rm -rf remote-state-lab



###################################
Lab : Creating AWS resources using terraform modules
###################################

cd /home/ubuntu/
sudo apt install tree -y

wget https://s3.ap-south-1.amazonaws.com/files.cloudthat.training/devops/terraform-essentials/terraform-modules.tar.gz
tar -xvf terraform-modules.tar.gz

cd terraform-modules
tree

# cat all files to see the module structure
vi main.tf
# Add the below code after block module "my_security_group"
output "secgrpid" {
  description = "Newly created sec grp"
  value       = module.my_security_group.sgid
}

cat provider.tf
# no change needed

vi variables.tf 

# Modify the VPC / Subnet ID / key_name

-Change vpc_id to any VPC in ca-central-1 (ex:vpc-10102478)
-Change subnet id (use available subnets from AZ a or b. ex: subnet-5189d339)
-Change key_name to yourname-Lab12-keypair (ex: martuj-Lab12-keypair)


variable "region" {
    default = "ca-central-1"
}

# enter VPC id
variable "sg_vpcid" {
    default = "Your VPC ID"
}

variable "from_port" {
    default = 22
}

variable "to_port" {
    default = 22
}

# security grp name to be created
variable  "sg_name" {
    default = "terraform-sgp"
}

variable "ami_id" {
    default = "ami-0e28822503eeedddc"
}

variable "ins_type" {
    default = "t2.micro"
}

# enter a subnet id from Zone A or B
variable sub_id {
    default = "Your Subnet ID"
}

# add your name in key_name
variable key_name {
    default = "yourname-key-pair-lab9"
}

variable from_port2 {
    default = 80
}

variable to_port2 {
    default = 80
}

variable public_key {
    default = "mykey.pub"
}

# Save

# Create a key pair. The public key of the same will be saved into the EC2 being launched.
ssh-keygen -f mykey

terraform init
terraform fmt
terraform validate
terraform plan
terraform apply -auto-approve

Self Exercise Task:
# Add lines of code to print out the id of the new ec2 created (module.my_ec2.ec2_id)
# You can refer to how security grp id is outputted.

terraform destroy



=======================================
Conditional expressions in Terraform
--------------------------------------

mkdir conditions
cd conditions


vi instance.tf

provider "aws" {
  profile = "default"
  region  = "us-east-2"
}

resource "aws_instance" "example" {
  ami           = (var.ami == "ubuntu" ? "ami-0b9064170e32bde34" : "ami-0ba62214afa52bec7")
  instance_type = "t2.micro"
}


vi variable.tf

variable "ami" {
  type       = string
  description = "Enter ubuntu to run ubuntu instance or any other value for Red Hat instance"
}


terraform init
terraform plan
Eneter value: ubuntu
terraform apply
Eneter value: ubuntu
yes

Run again with some random value 
--------------
terraform plan
Eneter value: sgs
terraform apply
Eneter value: sgs
yes

terraform destroy

Dynamic Blocks in Terraform
-----------------------------

mkdir dynamic
cd dynamic

vi security_grp.tf

provider "aws" {
  profile = "default"
  region  = "us-east-2"
}


locals {
   ingress_rules = [{
      port        = 443
      description = "Ingress rules for port 443"
   },
   {
      port        = 80
      description = "Ingree rules for port 80"
   }]
}

resource "aws_security_group" "main" {
   name   = "dynamic_block_resource"

   dynamic "ingress" {
      for_each = local.ingress_rules

      content {
         description = ingress.value.description
         from_port   = ingress.value.port
         to_port     = ingress.value.port
         protocol    = "tcp"
         cidr_blocks = ["0.0.0.0/0"]
      }
   }

   tags = {
      Name = "Dynamic block Security group"
   }
}

terraform init
terraform plan
terraform apply

verify the security group creation in the security group service page and search for 
the security group name “dynamic_block_resource”. Verify the ingress rules associated with the created security group.

terraform destroy




